swagger: "2.0"

securityDefinitions:
  jwt:
    type: apiKey
    name: Authorization
    in: header

tags:
- name: users
  description: users API

- name: expense
  description: "API documentation for Expenses"

- name: auth
  description: "API for signup, login, logout"

paths:
# [GET] users
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] users
    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'


# [GET] expenses
  /expense:
    get:
      tags:
      - expense
      summary: "Get all expenses"
      description: "Get all expenses"
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
        500:
          description: 'Server Error'

# [POST] expenses
    post:
      tags:
      - expense
      summary: "Create a new expense"
      description: "Create a new expense"
      produces:
        - "application/json"
      parameters:
        - name: "ExpenseDto"
          in: "body"
          description: "Expense object to be created"
          required: true
          schema:
            $ref: "#/definitions/ExpenseDto"
      responses:
        201:
          description: "Created"

# [GET] expenses/:id
  /expenses/{id}:
    get:
      tags:
      - expense
      summary: "Get an expense by ID"
      description: "Get an expense by ID"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the expense to be retrieved"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

# [PUT] expenses/:id
    put:
      tags:
      - expense
      summary: "Update an existing expense"
      description: "Update an existing expense"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the expense to be updated"
          required: true
          type: "string"
        - name: "ExpenseDto"
          in: "body"
          description: "Expense object to be updated"
          required: true
          schema:
            $ref: "#/definitions/ExpenseDto"
      responses:
        200:
          description: "OK"

# [DELETE] expenses/:id
    delete:
      tags:
      - expense
      summary: "Delete an expense by ID"
      description: "Delete an expense by ID"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the expense to be deleted"
          required: true
          type: "string"
      responses:
        204:
          description: "No Content"

# [GET] expenses/filter/:category
  /expenses/filter/{category}:
    get:
      tags:
      - expense
      summary: "Get expenses by category"
      description: "Get expenses by category"
      produces:
        - "application/json"
      parameters:
        - name: "category"
          in: "path"
          description: "Category of the expenses to be retrieved"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"

# [GET] expenses/filter/:startDate/:endDate
  /expenses/filter/{startDate}/{endDate}:
    get:
      tags:
      - expense
      summary: "Get expenses by date range"
      description: "Get expenses by date range"
      produces:
        - "application/json"
      parameters:
        - name: "startDate"
          in: "path"
          description: "Start date of the expenses to be retrieved"
          required: true
          type: "string"
        - name: "endDate"
          in: "path"
          description: "End date of the expenses to be retrieved"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"


# [POST] /signup
  /signup:
    post:
      tags:
      - auth
      summary: "sign up"
      description: "sign up"
      produces:
        - "application/json"
      parameters:
        - name: "auth"
          in: "body"
          description: "sign up"
          required: true
          schema:
            $ref: '#/definitions/auth'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [POST] /signup
  /login:
    post:
      tags:
      - auth
      summary: "login"
      description: "login"
      produces:
        - "application/json"
      parameters:
        - name: "auth"
          in: "body"
          description: "login"
          required: true
          schema:
            $ref: '#/definitions/auth'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [POST] /signup
  /logout:
    post:
      tags:
      - auth
      summary: "logout"
      description: "logout"
      produces:
        - "application/json"
      parameters:
        - name: "auth"
          in: "body"
          description: "logout"
          required: true
          schema:
            $ref: '#/definitions/auth'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'



# definitions
definitions:
  users:
    type: object
    required:
        - email
        - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

  ExpenseDto:
    type: "object"
    properties:
      title:
        type: "string"
      category:
        type: "string"
      description:
        type: "string"
      amount:
        type: "number"

  auth:
    type: object
    required:
        - email
        - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

schemes:
 - https
 - http
